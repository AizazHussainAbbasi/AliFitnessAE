@using AliFitnessAE.Web.Resources
@using AliFitnessAE.Web.Areas.Admin.Views.Shared.Components.UserTrackingChart
@model ChartJsVModel

<div class="chart-container">
    <canvas id="@Model.HtmlControlId"></canvas>
</div>
<script>
function updateConfigAsNewObject(chart) {
	tooltipsEnabled = false;
	if (chart.config.type === 'line')
		tooltipsEnabled = true;

    chart.options = {
		events: false,
		tooltips: {
			enabled: tooltipsEnabled
		},
		hover: {
			animationDuration: 0
		},
		animation: {
			duration: 1,
			onComplete: function() {
				var chartInstance = this.chart,
					ctx = chartInstance.ctx;
				ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
				ctx.textAlign = 'center';
				ctx.textBaseline = 'bottom';

				this.data.datasets.forEach(function(dataset, i) {
					var meta = chartInstance.controller.getDatasetMeta(i);
                    meta.data.forEach(function (bar, index) {
                        debugger;
						var data = dataset.data[index];
                        ctx.fillText(data, bar._model.x, bar._model.y - 5);
						//dataset.backgroundColor = 'blue'; 
					});
				});
			}
		}
    }; 
	chart.update();
} 
if (document.readyState !== 'loading') {
    console.log('document is already ready, just execute code here');
    var controlId =  @Html.Raw(Json.Serialize(@Model.HtmlControlId));
    var ctx = document.getElementById(controlId);
    var myChart = new Chart(ctx, @Html.Raw(Model.ChartJson));
    updateConfigAsNewObject(myChart);
}
else {
    document.addEventListener('DOMContentLoaded', (event) => {
        console.log('document was not ready, place code here');
        var controlId =  @Html.Raw(Json.Serialize(@Model.HtmlControlId));
        var ctx = document.getElementById(controlId);
        var myChart = new Chart(ctx, @Html.Raw(Model.ChartJson));
        updateConfigAsNewObject(myChart);
    })
}
</script>